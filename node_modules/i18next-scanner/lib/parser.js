'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint no-console: 0 */


var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _isObject = require('lodash/isObject');

var _isObject2 = _interopRequireDefault(_isObject);

var _isUndefined = require('lodash/isUndefined');

var _isUndefined2 = _interopRequireDefault(_isUndefined);

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

var _flatten = require('lodash/flatten');

var _flatten2 = _interopRequireDefault(_flatten);

var _union = require('lodash/union');

var _union2 = _interopRequireDefault(_union);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _set = require('lodash/set');

var _set2 = _interopRequireDefault(_set);

var _escapeRegExp = require('lodash/escapeRegExp');

var _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);

var _includes = require('lodash/includes');

var _includes2 = _interopRequireDefault(_includes);

var _trim = require('lodash/trim');

var _trim2 = _interopRequireDefault(_trim);

var _toPairs = require('lodash/toPairs');

var _toPairs2 = _interopRequireDefault(_toPairs);

var _sortBy = require('lodash/sortBy');

var _sortBy2 = _interopRequireDefault(_sortBy);

var _esprima = require('esprima');

var _ensureArray = require('./ensure-array');

var _ensureArray2 = _interopRequireDefault(_ensureArray);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaults = {
    debug: false, // verbose logging

    sort: false, // sort keys in alphabetical order

    attr: { // HTML attributes to parse
        list: ['data-i18n'],
        extensions: ['.html', '.htm']
    },

    func: { // function names to parse
        list: ['i18next.t', 'i18n.t'],
        extensions: ['.js', '.jsx']
    },

    lngs: ['en'], // array of supported languages
    fallbackLng: 'en', // language to lookup key if not found while calling `parser.get(key, { lng: '' })`

    ns: [], // string or array of namespaces

    defaultNs: 'translation', // default namespace used if not passed to translation function

    defaultValue: '', // default value used if not passed to `parser.set`

    // resource
    resource: {
        loadPath: 'i18n/{{lng}}/{{ns}}.json', // the source resource path (relative to current working directory)
        savePath: 'i18n/{{lng}}/{{ns}}.json', // the target resource path (relative to the path specified with `gulp.dest(path)`)
        jsonIndent: 2
    },

    keySeparator: '.', // char to separate keys
    nsSeparator: ':', // char to split namespace from key

    // Context Form
    context: true, // whether to add context form key
    contextFallback: true, // whether to add a fallback key as well as the context form key
    contextSeparator: '_', // char to split context from key

    // Plural Form
    plural: true, // whether to add plural form key
    pluralFallback: true, // whether to add a fallback key as well as the plural form key
    pluralSeparator: '_', // char to split plural from key

    // interpolation options
    interpolation: {
        prefix: '{{', // prefix for interpolation
        suffix: '}}' // suffix for interpolation
    }
};

// http://codereview.stackexchange.com/questions/45991/balanced-parentheses
var matchBalancedParentheses = function matchBalancedParentheses() {
    var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var parentheses = '[]{}()';
    var stack = [];
    var bracePosition = void 0;
    var start = -1;
    var i = 0;

    str = '' + str; // ensure string
    for (i = 0; i < str.length; ++i) {
        if (start >= 0 && stack.length === 0) {
            return str.substring(start, i);
        }

        bracePosition = parentheses.indexOf(str[i]);
        if (bracePosition < 0) {
            continue;
        }
        if (bracePosition % 2 === 0) {
            if (start < 0) {
                start = i; // remember the start position
            }
            stack.push(bracePosition + 1); // push next expected brace position
            continue;
        }

        if (stack.pop() !== bracePosition) {
            return str.substring(start, i);
        }
    }

    return str.substring(start, i);
};

var transformOptions = function transformOptions(options) {
    // Attribute
    if ((0, _isUndefined2.default)((0, _get2.default)(options, 'attr.list'))) {
        (0, _set2.default)(options, 'attr.list', defaults.attr.list);
    }
    if ((0, _isUndefined2.default)((0, _get2.default)(options, 'attr.extensions'))) {
        (0, _set2.default)(options, 'attr.extensions', defaults.attr.extensions);
    }

    // Function
    if ((0, _isUndefined2.default)((0, _get2.default)(options, 'func.list'))) {
        (0, _set2.default)(options, 'func.list', defaults.func.list);
    }

    // Resource
    if ((0, _isUndefined2.default)((0, _get2.default)(options, 'func.extensions'))) {
        (0, _set2.default)(options, 'func.extensions', defaults.func.extensions);
    }
    if ((0, _isUndefined2.default)((0, _get2.default)(options, 'resource.loadPath'))) {
        (0, _set2.default)(options, 'resource.loadPath', defaults.resource.loadPath);
    }
    if ((0, _isUndefined2.default)((0, _get2.default)(options, 'resource.savePath'))) {
        (0, _set2.default)(options, 'resource.savePath', defaults.resource.savePath);
    }
    if ((0, _isUndefined2.default)((0, _get2.default)(options, 'resource.jsonIndent'))) {
        (0, _set2.default)(options, 'resource.jsonIndent', defaults.resource.jsonIndent);
    }

    // Accept both nsseparator or nsSeparator
    if (!(0, _isUndefined2.default)(options.nsseparator)) {
        options.nsSeparator = options.nsseparator;
        delete options.nsseparator;
    }
    // Allowed only string or false
    if (!(0, _isString2.default)(options.nsSeparator)) {
        options.nsSeparator = false;
    }

    // Accept both keyseparator or keySeparator
    if (!(0, _isUndefined2.default)(options.keyseparator)) {
        options.keySeparator = options.keyseparator;
        delete options.keyseparator;
    }
    // Allowed only string or false
    if (!(0, _isString2.default)(options.keySeparator)) {
        options.keySeparator = false;
    }

    if (!(0, _isArray2.default)(options.ns)) {
        options.ns = [options.ns];
    }

    options.ns = (0, _union2.default)((0, _flatten2.default)(options.ns.concat(options.defaultNs)));

    return options;
};

/**
* Creates a new parser
* @constructor
*/

var Parser = function () {

    // The resStore stores all translation keys including unused ones
    function Parser(options) {
        var _this = this;

        _classCallCheck(this, Parser);

        this.options = _extends({}, defaults);
        this.resStore = {};
        this.resScan = {};

        this.options = transformOptions(_extends({}, this.options, options));

        var lngs = this.options.lngs;
        var namespaces = this.options.ns;

        lngs.forEach(function (lng) {
            _this.resStore[lng] = _this.resStore[lng] || {};
            _this.resScan[lng] = _this.resScan[lng] || {};
            namespaces.forEach(function (ns) {
                var resPath = _this.formatResourceLoadPath(lng, ns);

                _this.resStore[lng][ns] = {};
                _this.resScan[lng][ns] = {};
                try {
                    var stat = _fs2.default.statSync(resPath);

                    if (stat.isFile()) {
                        _this.resStore[lng][ns] = JSON.parse(_fs2.default.readFileSync(resPath, 'utf-8'));
                    }
                } catch (err) {
                    _this.log('Unable to load ' + JSON.stringify(resPath));
                }
            });
        });

        this.log('Parser: options=' + JSON.stringify(this.options));
    }

    // The resScan only stores translation keys parsed from code


    _createClass(Parser, [{
        key: 'log',
        value: function log() {
            var debug = this.options.debug;

            if (debug) {
                for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
                    args[_key2] = arguments[_key2];
                }

                console.log.apply(this, args);
            }
        }
    }, {
        key: 'formatResourceLoadPath',
        value: function formatResourceLoadPath(lng, ns) {
            var options = this.options;

            var regex = {
                lng: new RegExp((0, _escapeRegExp2.default)(options.interpolation.prefix + 'lng' + options.interpolation.suffix), 'g'),
                ns: new RegExp((0, _escapeRegExp2.default)(options.interpolation.prefix + 'ns' + options.interpolation.suffix), 'g')
            };

            return options.resource.loadPath.replace(regex.lng, lng).replace(regex.ns, ns);
        }
    }, {
        key: 'formatResourceSavePath',
        value: function formatResourceSavePath(lng, ns) {
            var options = this.options;
            var regex = {
                lng: new RegExp((0, _escapeRegExp2.default)(options.interpolation.prefix + 'lng' + options.interpolation.suffix), 'g'),
                ns: new RegExp((0, _escapeRegExp2.default)(options.interpolation.prefix + 'ns' + options.interpolation.suffix), 'g')
            };

            return options.resource.savePath.replace(regex.lng, lng).replace(regex.ns, ns);
        }
        // i18next.t('ns:foo.bar') // matched
        // i18next.t("ns:foo.bar") // matched
        // i18next.t('ns:foo.bar') // matched
        // i18next.t("ns:foo.bar", { count: 1 }); // matched
        // i18next.t("ns:foo.bar" + str); // not matched

    }, {
        key: 'parseFuncFromString',
        value: function parseFuncFromString(content) {
            var _this2 = this;

            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var customHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            if ((0, _isFunction2.default)(opts)) {
                customHandler = opts;
                opts = {};
            }

            var funcs = opts.list !== undefined ? (0, _ensureArray2.default)(opts.list) : (0, _ensureArray2.default)(this.options.func.list);

            if (funcs.length === 0) {
                return this;
            }

            var matchPattern = funcs.map(function (func) {
                return '(?:' + func + ')';
            }).join('|').replace(/\./g, '\\.');
            var pattern = '(?:(?:^\\s*)|[^a-zA-Z0-9_])(?:' + matchPattern + ')\\(("(?:[^"\\\\]|\\\\(?:.|$))*"|\'(?:[^\'\\\\]|\\\\(?:.|$))*\')\\s*[,)]';
            var re = new RegExp(pattern, 'gim');

            var r = void 0;

            var _loop = function _loop() {
                var options = {};
                var full = r[0];

                var key = (0, _trim2.default)(r[1]); // Remove leading and trailing whitespace
                var firstChar = key[0];
                if ((0, _includes2.default)(['\'', '"'], firstChar)) {
                    // Remove first and last character
                    key = key.slice(1, -1);
                }

                // restore multiline strings
                key = key.replace(/(\\\n|\\\r\n)/g, '');

                // JavaScript character escape sequences
                // https://mathiasbynens.be/notes/javascript-escapes

                // Single character escape sequences
                // Note: IE < 9 treats '\v' as 'v' instead of a vertical tab ('\x0B'). If cross-browser compatibility is a concern, use \x0B instead of \v.
                // Another thing to note is that the \v and \0 escapes are not allowed in JSON strings.
                key = key.replace(/(\\b|\\f|\\n|\\r|\\t|\\v|\\0|\\\\|\\"|\\')/g, function (match) {
                    return eval('"' + match + '"');
                });

                // * Octal escapes have been deprecated in ES5.
                // * Hexadecimal escape sequences: \\x[a-fA-F0-9]{2}
                // * Unicode escape sequences: \\u[a-fA-F0-9]{4}
                key = key.replace(/(\\x[a-fA-F0-9]{2}|\\u[a-fA-F0-9]{4})/g, function (match) {
                    return eval('"' + match + '"');
                });

                var endsWithComma = full[full.length - 1] === ',';
                if (endsWithComma) {
                    var _opts = _extends({}, opts),
                        propsFilter = _opts.propsFilter;

                    var code = matchBalancedParentheses(content.substr(re.lastIndex));

                    if (typeof propsFilter === 'function') {
                        code = propsFilter(code);
                    }

                    try {
                        var syntax = (0, _esprima.parse)('(' + code + ')');
                        var props = (0, _get2.default)(syntax, 'body[0].expression.properties') || [];
                        // http://i18next.com/docs/options/
                        var supportedOptions = ['defaultValue', 'count', 'context', 'ns'];

                        props.forEach(function (prop) {
                            if ((0, _includes2.default)(supportedOptions, prop.key.name)) {
                                if (prop.value.type === 'Literal') {
                                    options[prop.key.name] = prop.value.value;
                                } else if (prop.value.type === 'TemplateLiteral') {
                                    options[prop.key.name] = prop.value.quasis.map(function (element) {
                                        return element.value.cooked;
                                    }).join('');
                                } else {
                                    // Unable to get value of the property
                                    options[prop.key.name] = '';
                                }
                            }
                        });
                    } catch (err) {
                        _this2.log('Unable to parse code "' + code + '"');
                        _this2.log(err);
                    }
                }

                if (customHandler) {
                    customHandler(key, options);
                    return 'continue';
                }

                _this2.set(key, options);
            };

            while (r = re.exec(content)) {
                var _ret = _loop();

                if (_ret === 'continue') continue;
            }

            return this;
        }
        // Parses translation keys from `data-i18n` attribute in HTML
        // <div data-i18n="[attr]ns:foo.bar;[attr]ns:foo.baz">
        // </div>

    }, {
        key: 'parseAttrFromString',
        value: function parseAttrFromString(content) {
            var _this3 = this;

            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var customHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            if ((0, _isFunction2.default)(opts)) {
                customHandler = opts;
                opts = {};
            }

            var attrs = opts.list !== undefined ? (0, _ensureArray2.default)(opts.list) : (0, _ensureArray2.default)(this.options.attr.list);

            if (attrs.length === 0) {
                return this;
            }

            var matchPattern = attrs.map(function (attr) {
                return '(?:' + attr + ')';
            }).join('|').replace(/\./g, '\\.');
            var pattern = '(?:(?:^[\\s]*)|[^a-zA-Z0-9_])(?:' + matchPattern + ')=("[^"]*"|\'[^\']*\')';
            var re = new RegExp(pattern, 'gim');

            var r = void 0;

            while (r = re.exec(content)) {
                var attr = (0, _trim2.default)(r[1], '\'"');
                var keys = attr.indexOf(';') >= 0 ? attr.split(';') : [attr];

                keys.forEach(function (key) {
                    key = (0, _trim2.default)(key);
                    if (key.length === 0) {
                        return;
                    }
                    if (key.indexOf('[') === 0) {
                        var parts = key.split(']');
                        key = parts[1];
                    }
                    if (key.indexOf(';') === key.length - 1) {
                        key = key.substr(0, key.length - 2);
                    }

                    if (customHandler) {
                        customHandler(key);
                        return;
                    }

                    _this3.set(key);
                });
            }

            return this;
        }
        // Get the value of a translation key or the whole resource store containing translation information
        // @param {string} [key] The translation key
        // @param {object} [opts] The opts object
        // @param {boolean} [opts.sort] True to sort object by key
        // @param {boolean} [opts.lng] The language to use
        // @return {object}

    }, {
        key: 'get',
        value: function get(key) {
            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if ((0, _isObject2.default)(key)) {
                opts = key;
                key = undefined;
            }

            var resStore = {};
            if (this.options.removeUnusedKeys) {
                resStore = this.resScan;
            } else {
                resStore = this.resStore;
            }

            if (opts.sort) {
                // sort by key
                Object.keys(resStore).forEach(function (lng) {
                    var namespaces = resStore[lng];

                    Object.keys(namespaces).forEach(function (ns) {
                        var pairs = (0, _toPairs2.default)(namespaces[ns]);
                        resStore[lng][ns] = (0, _sortBy2.default)(pairs, function (pair) {
                            return pair[0];
                        }).reduce(function (memo, pair) {
                            var _key = pair[0];
                            var _value = pair[1];
                            memo[_key] = _value;
                            return memo;
                        }, {});
                    });
                });
            }

            if (!(0, _isUndefined2.default)(key)) {
                var ns = this.options.defaultNs;

                // http://i18next.com/translate/keyBasedFallback/
                // Set nsSeparator and keySeparator to false if you prefer
                // having keys as the fallback for translation.
                // i18next.init({
                //   nsSeparator: false,
                //   keySeparator: false
                // })

                if ((0, _isString2.default)(this.options.nsSeparator) && key.indexOf(this.options.nsSeparator) > -1) {
                    var parts = key.split(this.options.nsSeparator);

                    ns = parts[0];
                    key = parts[1];
                }

                var keys = (0, _isString2.default)(this.options.keySeparator) ? key.split(this.options.keySeparator) : [key];
                var lng = opts.lng ? opts.lng : this.options.fallbackLng;
                var namespaces = resStore[lng] || {};

                var value = namespaces[ns];
                var x = 0;

                while (keys[x]) {
                    value = value && value[keys[x]];
                    x++;
                }

                return value;
            }

            return resStore;
        }
        // Set translation key with an optional defaultValue to i18n resource store
        // @param {string} key The translation key
        // @param {object} [options] The options object
        // @param {string} [options.defaultValue] defaultValue to return if translation not found
        // @param {number} [options.count] count value used for plurals
        // @param {string} [options.context] used for contexts (eg. male)
        // @param {string} [options.ns] namespace for the translation
        // @param {string|boolean} [options.nsSeparator] The value used to override this.options.nsSeparator
        // @param {string|boolean} [options.keySeparator] The value used to override this.options.keySeparator

    }, {
        key: 'set',
        value: function set(key) {
            var _this4 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            // Backward compatibility
            if ((0, _isString2.default)(options)) {
                var _defaultValue = options;
                options = {
                    defaultValue: _defaultValue
                };
            }

            var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
            var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;

            var ns = options.ns || this.options.defaultNs;

            console.assert((0, _isString2.default)(ns) && !!ns.length, 'ns is not a valid string', ns);

            // http://i18next.com/translate/keyBasedFallback/
            // Set nsSeparator and keySeparator to false if you prefer
            // having keys as the fallback for translation.
            // i18next.init({
            //   nsSeparator: false,
            //   keySeparator: false
            // })

            if ((0, _isString2.default)(nsSeparator) && key.indexOf(nsSeparator) > -1) {
                var parts = key.split(nsSeparator);

                ns = parts[0];
                key = parts[1];
            }

            var _options = this.options,
                lngs = _options.lngs,
                context = _options.context,
                contextFallback = _options.contextFallback,
                contextSeparator = _options.contextSeparator,
                plural = _options.plural,
                pluralFallback = _options.pluralFallback,
                pluralSeparator = _options.pluralSeparator,
                defaultValue = _options.defaultValue;

            var keys = (0, _isString2.default)(keySeparator) ? key.split(keySeparator) : [key];

            lngs.forEach(function (lng) {
                var resLoad = _this4.resStore[lng] && _this4.resStore[lng][ns];
                var resScan = _this4.resScan[lng] && _this4.resScan[lng][ns];

                if (!(0, _isObject2.default)(resLoad)) {
                    // Skip undefined namespace
                    _this4.log('The namespace "' + ns + '" does not exist:', { key: key, options: options });
                    return;
                }

                Object.keys(keys).forEach(function (index) {
                    var key = keys[index];

                    if (index < keys.length - 1) {
                        resLoad[key] = resLoad[key] || {};
                        resLoad = resLoad[key];
                        resScan[key] = resScan[key] || {};
                        resScan = resScan[key];
                        return; // continue
                    }

                    // Context & Plural
                    // http://i18next.com/translate/context/
                    // http://i18next.com/translate/pluralSimple/
                    //
                    // Format:
                    // "<key>[[{{contextSeparator}}<context>]{{pluralSeparator}}<plural>]"
                    //
                    // Example:
                    // {
                    //   "translation": {
                    //     "friend": "A friend",
                    //     "friend_male": "A boyfriend",
                    //     "friend_female": "A girlfriend",
                    //     "friend_male_plural": "{{count}} boyfriends",
                    //     "friend_female_plural": "{{count}} girlfriends"
                    //   }
                    // }
                    var resKeys = [];

                    // http://i18next.com/translate/context/
                    var containsContext = function () {
                        if (!context) {
                            return false;
                        }
                        if ((0, _isUndefined2.default)(options.context)) {
                            return false;
                        }
                        return (0, _isFunction2.default)(context) ? context(lng, ns, key, options) : !!context;
                    }();

                    // http://i18next.com/translate/pluralSimple/
                    var containsPlural = function () {
                        if (!plural) {
                            return false;
                        }
                        if ((0, _isUndefined2.default)(options.count)) {
                            return false;
                        }
                        return (0, _isFunction2.default)(plural) ? plural(lng, ns, key, options) : !!plural;
                    }();

                    if (!containsContext && !containsPlural) {
                        resKeys.push(key);
                    }

                    if (containsContext && contextFallback || containsPlural && pluralFallback) {
                        resKeys.push(key);
                    }

                    if (containsContext) {
                        resKeys.push('' + key + contextSeparator + options.context);
                    }

                    if (containsPlural) {
                        resKeys.push('' + key + pluralSeparator + 'plural');
                    }

                    if (containsContext && containsPlural) {
                        resKeys.push('' + key + contextSeparator + options.context + pluralSeparator + 'plural');
                    }

                    resKeys.forEach(function (resKey) {
                        if (resLoad[resKey] === undefined) {
                            if (options.defaultValue !== undefined) {
                                // Use `options.defaultValue` if specified
                                resLoad[resKey] = options.defaultValue;
                            } else {
                                // Fallback to `defaultValue`
                                resLoad[resKey] = (0, _isFunction2.default)(defaultValue) ? defaultValue(lng, ns, key, options) : defaultValue;
                            }
                            _this4.log('Added a new translation key { %s: %s } to %s', JSON.stringify(resKey), JSON.stringify(resLoad[resKey]), JSON.stringify(_this4.formatResourceLoadPath(lng, ns)));
                        }

                        resScan[resKey] = resLoad[resKey];
                    });
                });
            });
        }
        // Returns a JSON string containing translation information
        // @param {object} [options] The options object
        // @param {boolean} [options.sort] True to sort object by key
        // @param {function|string[]|number[]} [options.replacer] The same as the JSON.stringify()
        // @param {string|number} [options.space] The same as the JSON.stringify() method
        // @return {string}

    }, {
        key: 'toJSON',
        value: function toJSON() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            var replacer = options.replacer,
                space = options.space,
                others = _objectWithoutProperties(options, ['replacer', 'space']);

            return JSON.stringify(this.get(others), replacer, space);
        }
    }]);

    return Parser;
}();

exports.default = Parser;