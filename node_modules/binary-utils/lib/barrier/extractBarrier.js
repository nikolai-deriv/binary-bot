'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _groupByKey = require('../object/groupByKey');

var _groupByKey2 = _interopRequireDefault(_groupByKey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var extractDigitBarrierHelper = function extractDigitBarrierHelper(contractsGroupedByExpiry) {
    var expiryTypes = Object.keys(contractsGroupedByExpiry);
    var result = {};
    expiryTypes.forEach(function (et) {
        var contractsByExpiry = contractsGroupedByExpiry[et];
        result[et] = [{
            name: 'Digit',
            values: contractsByExpiry[0].last_digit_range,
            defaultValue: contractsByExpiry[0].last_digit_range[0]
        }];
    });
    return result;
};

var extract2BarriersHelper = function extract2BarriersHelper(contractsGroupedByExpiry) {
    var expiryTypes = Object.keys(contractsGroupedByExpiry);
    var result = {};
    expiryTypes.forEach(function (et) {
        var contractsByExpiry = contractsGroupedByExpiry[et];
        result[et] = [{ name: 'High barrier', defaultValue: contractsByExpiry[0].high_barrier }, { name: 'Low barrier', defaultValue: contractsByExpiry[0].low_barrier }];
    });
    return result;
};

var extract1BarrierHelper = function extract1BarrierHelper(contractGroupedByExpiry, barrierName) {
    var expiryTypes = Object.keys(contractGroupedByExpiry);
    var result = {};
    expiryTypes.forEach(function (et) {
        var contractsByExpiry = contractGroupedByExpiry[et];
        var contractWithBarrier = contractsByExpiry.find(function (c) {
            return !!c.barrier;
        });
        if (!contractWithBarrier) {
            return;
        }
        result[et] = [{ name: barrierName, defaultValue: contractWithBarrier.barrier }];
    });
    return result;
};

exports.default = function (contracts, type) {
    var groupByExpiryType = (0, _groupByKey2.default)(contracts, 'expiry_type');

    switch (type) {
        // types with 1 barrier
        case 'CALL':
            return extract1BarrierHelper(groupByExpiryType, 'Higher than');
        case 'PUT':
            return extract1BarrierHelper(groupByExpiryType, 'Lower than');
        case 'ONETOUCH':
        case 'NOTOUCH':
            return extract1BarrierHelper(groupByExpiryType, 'Touch spot');

        // types with 2 barriers
        case 'EXPIRYMISS':
        case 'EXPIRYRANGE':
        case 'RANGE':
        case 'UPORDOWN':
            return extract2BarriersHelper(groupByExpiryType);

        // special case: digit type
        case 'DIGITMATCH':
        case 'DIGITDIFF':
        case 'DIGITOVER':
        case 'DIGITUNDER':
            return extractDigitBarrierHelper(groupByExpiryType);

        // These types do not have barrier
        case 'DIGITODD':
        case 'DIGITEVEN':
        case 'ASIANU':
        case 'ASIAND':
        case 'SPREADU':
        case 'SPREADD':
        default:
            return undefined;
    }
};