'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _arrayToObject = require('../array/arrayToObject');

var _arrayToObject2 = _interopRequireDefault(_arrayToObject);

var _groupByKey = require('../object/groupByKey');

var _groupByKey2 = _interopRequireDefault(_groupByKey);

var _extractDurationHelper = require('./extractDurationHelper');

var _extractDurationHelper2 = _interopRequireDefault(_extractDurationHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contracts, type) {
    var forwardStartingContracts = contracts.filter(function (c) {
        return !!c.forward_starting_options && c.contract_type === type;
    });
    if (forwardStartingContracts.length === 0) {
        return undefined;
    }

    var forwardOptions = forwardStartingContracts[0].forward_starting_options;
    var groupByDate = (0, _groupByKey2.default)(forwardOptions || [], 'date');
    var forwardStartingRange = [];
    Object.keys(groupByDate).sort(function (a, b) {
        return +a - +b;
    }).forEach(function (date) {
        var timesPerDateArr = groupByDate[date].map(function (obj) {
            var open = new Date(obj.open * 1000);
            var close = new Date(obj.close * 1000);
            return { open: open, close: close };
        });
        var timesPerDateObj = (0, _arrayToObject2.default)(timesPerDateArr);
        forwardStartingRange.push(_extends({ date: new Date(date * 1000) }, timesPerDateObj));
    });

    var forwardStartingDurations = (0, _extractDurationHelper2.default)(forwardStartingContracts, type);
    return {
        range: forwardStartingRange,
        options: forwardStartingDurations
    };
};