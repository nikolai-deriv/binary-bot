"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.relativeStrengthIndexArray = void 0;

var _binaryUtils = require("binary-utils");

var _math = require("./math");

var calcGain = function calcGain(q1, q2) {
  return q2 > q1 ? q2 - q1 : 0;
};

var calcLoss = function calcLoss(q1, q2) {
  return q2 < q1 ? q1 - q2 : 0;
};

var calcFirstAvgDiff = function calcFirstAvgDiff(vals, comp, periods) {
  var prev;
  return vals.reduce(function (r, q, i) {
    if (i === 1) {
      prev = r;
    }

    var diff = comp(prev, q);
    prev = q;
    return diff + (i === 1 ? 0 : r);
  }) / periods;
};

var calcSecondAvgDiff = function calcSecondAvgDiff(vals, comp, periods, initAvg) {
  var prev;

  if (vals.length === 1) {
    // There is no data to calc avg
    return initAvg;
  }

  return vals.reduce(function (r, q, i) {
    if (i === 1) {
      prev = r;
    }

    var diff = comp(prev, q);
    prev = q;
    var prevAvg = i === 1 ? initAvg : r;
    return (prevAvg * (periods - 1) + diff) / periods;
  });
};

var relativeStrengthIndex = function relativeStrengthIndex(data, config) {
  var memoizedDiff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var periods = config.periods,
      field = config.field;

  if (data.length < periods) {
    throw new Error('Periods longer than data length');
  }

  if (data.length === periods) {
    return 0;
  }

  var vals = (0, _math.takeField)(data.slice(0, periods + 1), field);
  var restSeq;
  var initAvgGain;
  var initAvgLoss;

  if (memoizedDiff && 'gain' in memoizedDiff) {
    restSeq = (0, _math.takeField)(data.slice(-2), field);
    initAvgGain = memoizedDiff.gain;
    initAvgLoss = memoizedDiff.loss;
  } else {
    // include last element from above to calc diff
    restSeq = (0, _math.takeField)(data.slice(periods, data.length), field);
    initAvgGain = calcFirstAvgDiff(vals, calcGain, periods);
    initAvgLoss = calcFirstAvgDiff(vals, calcLoss, periods);
  }

  var avgGain = calcSecondAvgDiff(restSeq, calcGain, periods, initAvgGain);
  var avgLoss = calcSecondAvgDiff(restSeq, calcLoss, periods, initAvgLoss);

  if (memoizedDiff) {
    memoizedDiff.gain = avgGain;
    memoizedDiff.loss = avgLoss;
  }

  if (avgGain === 0) {
    return 0;
  } else if (avgLoss === 0) {
    return 100;
  }

  var RS = avgGain / avgLoss;
  return 100 - 100 / (1 + RS);
};

var relativeStrengthIndexArray = function relativeStrengthIndexArray(data, config) {
  var periods = config.periods,
      _config$pipSize = config.pipSize,
      pipSize = _config$pipSize === void 0 ? 2 : _config$pipSize;
  var memoizedDiff = {};
  return (0, _binaryUtils.sequence)(data.length - periods).map(function (x, i) {
    return +relativeStrengthIndex(data.slice(0, i + periods + 1), config, memoizedDiff).toFixed(pipSize);
  });
};

exports.relativeStrengthIndexArray = relativeStrengthIndexArray;
var _default = relativeStrengthIndex;
exports["default"] = _default;