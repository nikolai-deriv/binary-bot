"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _math = require("./math");

var _exponentialMovingAverage = require("./exponentialMovingAverage");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var paddingLeft = function paddingLeft(data, length) {
  var arr = [];
  arr.length = length - data.length;
  arr.fill(0);
  return [].concat(arr, _toConsumableArray(data));
};

var macdArray = function macdArray(data, config) {
  var field = config.field,
      _config$fastEmaPeriod = config.fastEmaPeriod,
      fastEmaPeriod = _config$fastEmaPeriod === void 0 ? 12 : _config$fastEmaPeriod,
      _config$slowEmaPeriod = config.slowEmaPeriod,
      slowEmaPeriod = _config$slowEmaPeriod === void 0 ? 26 : _config$slowEmaPeriod,
      _config$signalEmaPeri = config.signalEmaPeriod,
      signalEmaPeriod = _config$signalEmaPeri === void 0 ? 9 : _config$signalEmaPeri,
      _config$pipSize = config.pipSize,
      pipSize = _config$pipSize === void 0 ? 2 : _config$pipSize;
  var vals = (0, _math.takeField)(data, field);
  var length = vals.length;
  var fastEmaArray = paddingLeft((0, _exponentialMovingAverage.exponentialMovingAverageArray)(vals, {
    periods: fastEmaPeriod,
    pipSize: 20,
    field: field
  } // -------------------------- ^ set pipSize to 20 to prevent rounding
  ), length);
  var slowEmaArray = paddingLeft((0, _exponentialMovingAverage.exponentialMovingAverageArray)(vals, {
    periods: slowEmaPeriod,
    pipSize: 20,
    field: field
  }), length);
  var macdCalcArray = paddingLeft(slowEmaArray.map(function (x, i) {
    return +(fastEmaArray[i] - x).toFixed(pipSize);
  }), length);
  var signalEmaArray = paddingLeft((0, _exponentialMovingAverage.exponentialMovingAverageArray)(macdCalcArray.slice(slowEmaPeriod - 1), {
    periods: signalEmaPeriod,
    pipSize: 20,
    field: field
  }), length);
  return macdCalcArray.map(function (x, i) {
    return [+(x - signalEmaArray[i]).toFixed(pipSize), x, +signalEmaArray[i].toFixed(pipSize)];
  }).slice(slowEmaPeriod + signalEmaPeriod - 2);
};

var _default = macdArray;
exports["default"] = _default;